//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/SneakingPlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SneakingPlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SneakingPlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SneakingPlayerInput"",
    ""maps"": [
        {
            ""name"": ""SneakInput"",
            ""id"": ""75ae4ac9-924b-419d-8648-a82f7828e8b5"",
            ""actions"": [
                {
                    ""name"": ""PointInput"",
                    ""type"": ""Button"",
                    ""id"": ""8176b243-14ed-4f35-bed5-a1bbc42e5e2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sneak"",
                    ""type"": ""Button"",
                    ""id"": ""3c31f446-e17f-4327-9276-b0c8b0abba3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""781c0311-eb8d-49c0-95c6-97484697f82e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75e3a82c-db06-4b0e-bf84-101eb058f04a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sneak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SneakInput
        m_SneakInput = asset.FindActionMap("SneakInput", throwIfNotFound: true);
        m_SneakInput_PointInput = m_SneakInput.FindAction("PointInput", throwIfNotFound: true);
        m_SneakInput_Sneak = m_SneakInput.FindAction("Sneak", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SneakInput
    private readonly InputActionMap m_SneakInput;
    private List<ISneakInputActions> m_SneakInputActionsCallbackInterfaces = new List<ISneakInputActions>();
    private readonly InputAction m_SneakInput_PointInput;
    private readonly InputAction m_SneakInput_Sneak;
    public struct SneakInputActions
    {
        private @SneakingPlayerInput m_Wrapper;
        public SneakInputActions(@SneakingPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointInput => m_Wrapper.m_SneakInput_PointInput;
        public InputAction @Sneak => m_Wrapper.m_SneakInput_Sneak;
        public InputActionMap Get() { return m_Wrapper.m_SneakInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SneakInputActions set) { return set.Get(); }
        public void AddCallbacks(ISneakInputActions instance)
        {
            if (instance == null || m_Wrapper.m_SneakInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SneakInputActionsCallbackInterfaces.Add(instance);
            @PointInput.started += instance.OnPointInput;
            @PointInput.performed += instance.OnPointInput;
            @PointInput.canceled += instance.OnPointInput;
            @Sneak.started += instance.OnSneak;
            @Sneak.performed += instance.OnSneak;
            @Sneak.canceled += instance.OnSneak;
        }

        private void UnregisterCallbacks(ISneakInputActions instance)
        {
            @PointInput.started -= instance.OnPointInput;
            @PointInput.performed -= instance.OnPointInput;
            @PointInput.canceled -= instance.OnPointInput;
            @Sneak.started -= instance.OnSneak;
            @Sneak.performed -= instance.OnSneak;
            @Sneak.canceled -= instance.OnSneak;
        }

        public void RemoveCallbacks(ISneakInputActions instance)
        {
            if (m_Wrapper.m_SneakInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISneakInputActions instance)
        {
            foreach (var item in m_Wrapper.m_SneakInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SneakInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SneakInputActions @SneakInput => new SneakInputActions(this);
    public interface ISneakInputActions
    {
        void OnPointInput(InputAction.CallbackContext context);
        void OnSneak(InputAction.CallbackContext context);
    }
}
